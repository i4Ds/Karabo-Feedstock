name: Build Base

env:
  # Native Global Libs
  FFTW3_VERSION: 3.3.10
  FFTW3F_VERSION: 3.3.10
  
  # Rascil Line
  PYBDSF_VERSION: 1.10.2
  RASCIL_VERSION: 1.0.0
  SKA_SDP_DTMDL_VERSION: 0.1.3
  SKA_SDP_FUNC_PY_VERSION: 0.1.4
  SKA_SDP_FUNC_VERSION: 0.0.6
  
  # Oskar Line
  OSKAR_VERSION: 2.8.3
  OSKARPY_VERSION: 2.8.3  # oskarpy should have same version as `OSKAR_VERSION`

  # hvox Line -> don't add dev-label through ci-options because the setup is not ready for that.
  HVOX_VERSION: 0.0.1.dev48  # `pbr` version because they don't have an official release tag yet
  PYCSOU_VERSION: 1.0.7.dev1679  # `pbr` version because they just refer to `v2-dev` branch which has this version

  # WSClean
  IDG_VERSION: 1.2.0
  EVERYBEAM_VERSION: 0.5.7

  # additional karabo dependencies
  AOTOOLS_VERSION: 1.0.6
  SEQFILE_VERSION: 0.2.0
  EIDOS_VERSION: 1.1.0
  SKA_GRDR_NFTY_CU_VERSION: 0.3.0
  KATBEAM_VERSION: 0.1.0 # acutal version 0.1 and has therefore no patch, but is needed for conda-build
  TOOLS_21CM_VERSION: 2.0.2
  ARATMOSPY_VERSION: 1.0.0
  MONTAGEPY_VERSION: 6.0.0 # version is pinned through python-wheel in conda_build_config.yaml
  
  # SKACH contributions
  FINUFFT_VERSION: 2.1.0
  BLUEBILD_VERSION: 0.1.0

  # Other
  PACKAGE_NAME: ${{ inputs.packageName }}
  CHANNEL_LABEL: ${{ inputs.label }}
  
on:
  workflow_call:
    inputs:
      
      packageName:
        required: true
        type: string
      
      packageVersion:
        required: true
        type: string

      packageVersionName:  # env.VAR_NAME of the corresponding build
        required: true
        type: string

      buildNumber:
        required: true
        type: string

      customPath:
        required: false
        type: string
      
      pythonCall:
        required: false
        default: ""
        type: string
      
      label:
        required: false
        default: "main"
        type: string

      dev:
        required: false
        default: false
        type: boolean

      devDeps:  # string of dev-deps with ", " as delimiter
        required: false
        default: ""  # set matching packages-names for dev to use
        type: string
      
      useCuda:
        required: false
        default: false
        type: boolean
      
      isNative:
        required: false
        default: false
        type: boolean
      
      skipTest:
        required: false
        default: false
        type: boolean
        
jobs:   
  build_base:
    runs-on: ubuntu-latest
    outputs:
      pkgv: ${{ steps.pkgv.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
      - name: Install Cuda Toolkit => ${{ inputs.useCuda }}
        if: ${{ inputs.useCuda }}
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
      - name: Set custom path to recipe
        if: inputs.customPath != ''
        run: |
          echo "recipePath=${{ inputs.customPath }}" >> "$GITHUB_ENV"
      - name: Set default path to recipe
        if: inputs.customPath == ''
        run: |
          echo "recipePath=${{ inputs.packageName }}/." >> "$GITHUB_ENV"
      - name: Prepare Setup
        # In case ${{ inputs.dev }}="true", ${{ inputs.packageVersion }} of ${{ inputs.packageVersion }}
        # gets a PEP440 dev-version added at position "patch".
        # In case ${{ inputs.dev }}="true" & ${{ inputs.devDeps }} is not empty, the in `env` declared variables
        # included in `devDeps` gets a PEP440 dev-version added and exported for the underlying conda-build process.
        id: pkgv
        run: |
          BUILD_NR=${{ inputs.buildNumber }}
          if [[ ${{ inputs.dev }} == "true" ]]
          then
            BUILD_NR="$(($BUILD_NR + 1000))"
            PKG_VERSION=$(echo "${{ inputs.packageVersion }}" | sed 's/\([0-9]*\.[0-9]*\.\)\([0-9]*\)/\1dev\2/g')
            DEV_DEPS_LIST=$(echo "${{ inputs.packageVersionName }}, ${{ inputs.devDeps }}")
          else
            PKG_VERSION=${{ inputs.packageVersion }}
            DEV_DEPS_LIST=""
          fi
          echo "build=$BUILD_NR" >> "$GITHUB_ENV"
          echo "version=$PKG_VERSION" >> $GITHUB_OUTPUT

          PKG_KEYS=$(echo '${{ toJSON(env) }}' | jq -r 'keys | .[]')
          for PKG_KEY in $PKG_KEYS; do
            if [[ $DEV_DEPS_LIST == *"$PKG_KEY"* ]]
            then
              VERSION_ALT=$(echo "${!PKG_KEY}" | sed 's/\([0-9]*\.[0-9]*\.\)\([0-9]*\)/\1dev\2/g')
            else
              VERSION_ALT=${!PKG_KEY}
            fi
            NAME_ALT=${PKG_KEY}_ALT
            echo "$NAME_ALT=$VERSION_ALT" >> "$GITHUB_ENV"
          done

      - name: Install Conda-Build and create target
        run: |
          conda install -y -n base conda-libmamba-solver
          conda config --set solver libmamba
          conda install conda-build conda-verify
          conda build -c i4ds/label/${{ inputs.label }} -c i4ds -c conda-forge ${{ env.recipePath }}
      - name: Set linux64 as architecture
        if: ${{ inputs.isNative }}
        run: |
          echo "arch=linux-64" >> $GITHUB_ENV
      - name: Set python as architecture
        if: ${{ !inputs.isNative }}
        run: |
          echo "arch=noarch" >> $GITHUB_ENV
      - name: Install and publish to Conda
        shell: bash -l {0}
        run: |
          conda activate base
          conda install anaconda-client
          anaconda -t ${{ secrets.ANACONDA_SECRET }} upload /usr/share/miniconda/conda-bld/${{ env.arch }}/${{ inputs.packageName }}*.tar.bz2 --label ${{ inputs.label }}


  test_base:
    needs: build_base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        if: ${{ !inputs.skipTest }}
        uses: actions/checkout@v4
      - name: Install Conda
        if: ${{ !inputs.skipTest }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
      - name: Install Mamba Solver
        if: ${{ !inputs.skipTest }}
        run: |
          conda install -y -n base conda-libmamba-solver
          conda config --set solver libmamba
      - name: Install Cuda Toolkit => ${{ inputs.useCuda }}
        if: ${{ inputs.useCuda && !inputs.skipTest }}
        uses: Jimver/cuda-toolkit@v0.2.11
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
      - name: Install Package and test with Python
        if: ${{ !inputs.skipTest }}
        shell: bash -l {0}
        run: |
          conda create -y -n testenv python=3.9
          conda activate testenv
          conda install -y -c i4ds/label/${{ inputs.label }} -c i4ds -c conda-forge ${{ inputs.packageName }}="${{ needs.build_base.outputs.pkgv }}"
          python -c "${{ inputs.pythonCall }}"
